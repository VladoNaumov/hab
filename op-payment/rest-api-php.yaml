openapi: 3.0.1
info:
  title: OP Online Payment - REST API
  description: |
    OP Online Payment allows merchants and payment service providers to
    collect e-commerce payments as credit transfers to an OP account from both
    OP customers and other banks' customers (add-on service). The OP Online
    Payment service includes the collection of payments and the making of
    payment status requests and payment refunds.

    <br/>OP Online Payment API's documentation consists of three parts:
    * REST API: initiation of online payments as well as refunds and status
    queries
    * [Browser flow API](https://op-developer.fi/docs/api/42YdbF075u7BSKj56dTL21/Browser%20Flow%20API):
    initiation of the payment flow in the browser
    * [Merchant callback API](https://op-developer.fi/docs/api/6wcXukrFrP1FglcJsNNzYe/Merchant%20callback%20API):
    an optional service for receiving notifications on the payment status changes

    <br/>OP Online Payment service flow:

    1. The merchant or payment service provider initiates an online payment
    process by using the [Create payment](#operation/newPayment) operation.

    2. The merchant or payment service provider redirects the customer’s browser
    to the [Browser flow
    API](https://op-developer.fi/docs/api/42YdbF075u7BSKj56dTL21/Browser%20Flow%20API).

    3. After a successful payment the customer is redirected back to the web
    store's return URL given in the [Create payment](#operation/newPayment) operation.

    4. As an optional service, the OP Online Payment service can make a callback
    to the merchant or payment service provider's Callback API (to `b2bBackend`
    URL given in the [Create payment](#operation/newPayment) operation). We highly recommend
    implementing the [Merchant callback
    API](https://op-developer.fi/docs/api/6wcXukrFrP1FglcJsNNzYe/Merchant%20callback%20API) to ensure that the payment status
    will be received even if the customer’s browser does not come back to the
    shop for some reason (e.g. customer closes the browser or moves to another
    site).

    5. The merchant or payment service provider can also query a payment status
    with the [Payment status](#operation/getStatus) operation.

    6. The merchant or payment service provider can return a payment with the
    [Refund](#operation/refund) operation.

    ## Authentication

    The OP Online Payment REST API authenticates the caller by validating the
    API key (parameter `x-api-key` in the HTTP header) and the HMAC signature
    (parameter `Authorization` in the HTTP header) sent in the request. 

    The API key can be obtained from the OP Developer portal when a new
    application is created. The HMAC signature is calculated over the API request 
    contents using the authentication signature scheme described in the
    [authentication example](https://op-developer.fi/p/hmac-authentication).

    See the sections [Sandbox](#section/Sandbox) and [Production
    access](#section/Production-access) for further details on how to access
    specific environments.


    ## Security Considerations

    It is extremely important that the `merchantId`, the `accountId` and the
    client private key are not exposed at any point. Together they represent the
    identity of the client and thereby the corporation. In the possession of an
    attacker they could be used to make fraudulent API calls potentially causing
    considerable damage. Also, to secure the authenticity of the payment
    transaction, the `paymentId` should not be exposed to the customer (payer) or
    to any another party.


    ## Sandbox

    The OP Online Payment service can be tested in a sandbox environment by
    [creating a new application](https://op-developer.fi/developers/apps/create)
    in OP Developer and obtaining an API key. A secret is also generated, but it is not required
    for using the sandbox. Use the private key given in the [authentication example](https://op-developer.fi/p/hmac-authentication) when
    calculating the HMAC authentication signature for the sandbox API requests.

    The `merchantId` and the `accountId` can be anything in the sandbox but they
    should follow the UUID format. 

    There is currently no test UI available in the sandbox environment. The
    [Browser flow API](https://op-developer.fi/docs/api/42YdbF075u7BSKj56dTL21/Browser%20Flow%20API)
    sends the customer's browser directly to one of the return addresses
    (`return`, `reject` or `cancel`) specified in the [Create payment](#operation/newPayment) request.

    Payment cancellation can be simulated by using the `accountId` value
    "71fead42-b248-4fff-8b86-29296eacaf98" and similarly
    "eb3b688b-15da-48bd-b2fb-4f3eda501089" produces a failed payment (reject).

    Other `accountId` values produce a successful payment (return).

    The `x-api-key` header value for the [Merchant callback
    API](https://op-developer.fi/docs/api/6wcXukrFrP1FglcJsNNzYe/Merchant%20callback%20API)
    notifications in the sandbox environment is "dxB2AFwnwraQRrAsLZpJ5T4IrNGp7fhx". 

    Using the sandbox is free of charge although some restrictions on the number
    of calls apply.

    ## Production access

    Production access requires a contract with your local OP co-operative bank. Contact
    your OP co-operative bank directly. 

    Pricing information for production use is available from OP co-operative
    banks.

    Once you have signed the contract, [apply for production
    access](https://op-developer.fi/developers/apps/create) to get an API key.

    The API key will be available through OP Developer after we have accepted
    your application. The API keys are different for the sandbox and production.

    We will also request a public key for the signatures by e-mail from your
    technical contact. Carefully read the instructions in the e-mail on how to 
    onboard the public key to the production environment. After the public key
    has been received, the `merchantId`, `accountId` and production API URLs 
    will be sent to the technical contact in a secure email.

    For more information about the keys and how to generate them, see the page
    on [Authentication Signatures](https://op-developer.fi/p/hmac-authentication).

    ## Change log
    ### v1.3.1 (04/2024)
    #### Changed
    - Deprecated request parameter `messageToCustomer` in endpoint [Create payment](#operation/newPayment)
    
  contact:
    name: Support
    email: onlinepayment@op.fi
  version: 1.3.1
servers:
  - url: https://sandbox.apis.op.fi/paymentbutton


- lang: "PHP"
          source: |
            <?php
            /******************************************************************************
            
              OP Online Payment - REST API - Create payment PHP code example
            
              This is an example PHP script for using Create payment endpoint.
            
              Note, This code assumes that you have the guzzlehttp/guzzle and Ramsey/uuid
              packages installed for making HTTP requests and using uuid:s!
              You can install them with Composer:
            
                composer require guzzlehttp/guzzle
                composer require ramsey/uuid
            
                (Make sure you have installed php curl extension)
            
              You also need to have registered a developer application and to have generated
              a valid API key & API secret in OP Developer.
            
            *******************************************************************************/
            
            require 'vendor/autoload.php';
            
            use GuzzleHttp\Client;
            use GuzzleHttp\Exception\GuzzleException;
            use GuzzleHttp\RequestOptions;
            use Ramsey\Uuid\Uuid;
            
            // Credentials
            $apiKey = "TODO: your API key";                   // API key created in OP Developer
            $privateKeyFile = "TODO: your private key file";  // The sandbox will recognise signatures generated with the private key used on the OP Developer HMAC instructions page
            $merchantId = "TODO: your merchant ID";           // Sample Merchant ID in sandbox available on the OP Developer HMAC instructions page
            
            // Host details
            $server = "https://sandbox.apis.op.fi";
            $path = "/paymentbutton/v1/payments";
            $url = $server . $path;
            
            // Initialize client
            $client = new Client([
                'base_uri' => $server
            ]);
            
            ### 1. Initiate Online Payment process
            echo "1. Initiating an Online Payment payment process...\n";
            
            // ###########
            // New payment
            // ###########
            $date = new DateTime('UTC');
            $formattedDate = $date->format('D, d M Y H:i:s \G\M\T');
            
            $requestId = Uuid::uuid4()->toString();
            $sessionId = Uuid::uuid4()->toString();
            
            $paymentDetails = [
                'amount' => '1.00',
                'cancel' => ['url' => 'https://shop.example.com/cancel/path'],
                'reject' => ['url' => 'https://shop.example.com/reject/path'],
                'return' => ['url' => 'https://shop.example.com/return/path'],
                'currency' => 'EUR',
                'accountId' => '8a5d4aac-8f8f-47ed-ae2f-36ffeaf57c79',
                'reference' => 'RF3517834735'
            ];
            $payload = json_encode($paymentDetails);
            
            // Load the private key
            $privateKey = openssl_pkey_get_private("file://$privateKeyFile");
            
            $stringToSign = "POST" . "\n"
            . "application/json" . "\n"
            . $formattedDate . "\n"
            . $merchantId . "\n"
            . $apiKey . "\n"
            . $sessionId . "\n"
            . $requestId. "\n"
            . $url . "\n"
            . $payload;
            
            openssl_sign($stringToSign, $signature, $privateKey, OPENSSL_ALGO_SHA256);
            
            // Constructing the Authorization header
            $algorithm = 1; // For SHA-256
            $keyVersion = 0; // Example version, adjust as necessary
            $authorizationHeader = $merchantId . ':' . $algorithm . ':' . $keyVersion . ':' . bin2hex($signature);
            
            $header = [
                'Authorization' => $authorizationHeader,
                'Date' => $formattedDate,
                'Accept' => 'application/json',
                'Content-Type' => 'application/json',
                'x-session-id' => $sessionId,
                'x-request-id' => $requestId,
                'x-api-key' => $apiKey,
            ];
            
            // Make the request
            try {
                $response = $client->post($path, [
                    'headers' => $header,
                    'body' => $payload
                ]);
                echo "Response: " . $response->getStatusCode() . " " . $response->getReasonPhrase() . "\n";
                $responseArray = json_decode($response->getBody(), true);
                echo json_encode($responseArray, JSON_PRETTY_PRINT);
            } catch (GuzzleException $e) {
                echo "Request failed: " . $e->getMessage() . "\n";
            }
            ?>